#!/usr/bin/env bb

(require '[babashka.fs :as fs]
         '[babashka.process :as p]
         '[clojure.string :as str])

(defn find-markdown-files [dir]
  (->> (fs/glob dir "*.{md,markdown}")
       (sort-by str)
       vec))

(defn clear-terminal []
  (p/shell "clear"))

(defn render-with-glow [file]
  (try
    (p/shell "glow" (str file))
    (catch Exception e
      (println "Error rendering" file ":" (.getMessage e))
      (println "Make sure 'glow' is installed and in your PATH"))))

(defn get-user-input []
  (print "\n[Enter/j/n] next • [k/p] previous • [q] quit: ")
  (flush)
  (str/trim (read-line)))

(defn handle-navigation [input]
  (case input
    ("" "j" "n") :next
    ("k" "p") :prev
    "q" :quit
    :next)) ; default to next for any other input

(defn show-slideshow [dir]
  (let [md-files (find-markdown-files dir)]
    (if (empty? md-files)
      (println "No markdown files found in" dir)
        (loop [current-idx 0]
          (when (and (>= current-idx 0) (< current-idx (count md-files)))
            (let [file (nth md-files current-idx)]
              (clear-terminal)
              (println (str "[" (inc current-idx) "/" (count md-files) "] " (fs/file-name file)))
              (println (str (apply str (repeat 50 "-"))))
              (render-with-glow file)

              (let [action (handle-navigation (get-user-input))]
                (case action
                  :next (recur (inc current-idx))
                  :prev (recur (dec current-idx))
                  :quit (do (println "Goodbye!") nil)))))))))

(defn print-usage []
  (println "Usage: ./bin/present2 <directory>")
  (println "  Shows all markdown files in the directory using glow")
  (println "  Navigation:")
  (println "    Enter/j/n - next slide")
  (println "    k/p       - previous slide")
  (println "    q         - quit"))

;; Main execution
(if (= (count *command-line-args*) 1)
  (let [dir (first *command-line-args*)]
    (if (fs/directory? dir)
      (show-slideshow dir)
      (println "Error:" dir "is not a directory")))
  (print-usage))
